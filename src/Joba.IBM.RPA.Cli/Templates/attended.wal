âdefVar --name workingDirectory --type String
defVar --name filePath --type String
defVar --name excel --type Excel
//************************************
//Template for a attended
//- Continue you logic from line 16.
//************************************
//Set the working directory where all local .wal files are located. Always use 'workingDirectory' variable in the 'executeScript' to reference the scripts.
//- The build process will ignore 'executeScripts' that do not reference local .wal files using 'workingDirectory'.
//- DO NOT publish or use published scripts in the 'executeScript'. The build process will buil ONE script with all the local referenced dependencies.
//- Also, this will ensure your dev team only has to change one variable (workingDirectory) to run the project.
//- If you call an 'executeScript', always pass the 'workingDirectory' variable as a parameter, so you do not need to set in every script.
//- To store the source code .wal files, use GIT. Do not use the Control Center to store the .wal files.
setVarIf --variablename "${workingDirectory}" --value "@{workingDirectory}" --left "${workingDirectory}" --operator "Is_Null_Or_Empty" --comment "The build process will inject the correct value for \'workingDirectory\' at runtime."
onError --label HandleErrorWrapper
//TODO: write the rest of your logic from here
beginSub --name HandleErrorWrapper
goSub --label HandleError
recover
endSub
beginSub --name HandleError
//TODO: handle the error
endSub*23.0.3.0